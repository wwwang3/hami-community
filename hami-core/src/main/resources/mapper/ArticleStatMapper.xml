<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.wang3.hami.core.mapper.ArticleStatMapper">
    <resultMap id="BaseResultMap" type="top.wang3.hami.common.model.ArticleStat">
        <!--@mbg.generated-->
        <!--@Table article_stat-->
        <id column="article_id" property="articleId"/>
        <result column="user_id" property="userId"/>
        <result column="views" property="views"/>
        <result column="likes" property="likes"/>
        <result column="comments" property="comments"/>
        <result column="collects" property="collects"/>
        <result column="ctime" property="ctime"/>
        <result column="mtime" property="mtime"/>
    </resultMap>

    <resultMap id="ArticleStatDTOResultMap" type="top.wang3.hami.common.dto.stat.ArticleStatDTO">
        <id column="article_id" property="articleId"/>
        <result column="views" property="views"/>
        <result column="likes" property="likes"/>
        <result column="comments" property="comments"/>
        <result column="collects" property="collects"/>
    </resultMap>

    <resultMap id="UserStatResultMap" type="top.wang3.hami.common.model.UserStat">
        <result column="user_id" property="userId"/>
        <result property="totalArticles" column="total_articles"/>
        <result property="totalViews" column="total_views"/>
        <result property="totalLikes" column="total_likes"/>
        <result property="totalComments" column="total_comments"/>
        <result property="totalCollects" column="total_collects"/>
    </resultMap>

    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        article_id,
        user_id,
        views,
        likes,
        comments,
        collects,
        ctime,
        mtime
    </sql>


    <select id="selectUserStatsByUserIds" resultMap="UserStatResultMap">
        select user_id           as user_id,
               count(article_id) as total_articles,
               sum(views)        as total_views,
               sum(likes)        as total_likes,
               sum(comments)     as total_comments,
               sum(collects)     as total_collects
        from article_stat
        where user_id in
        <foreach collection="userIds" item="userId" open="(" close=")" separator=",">
            #{userId}
        </foreach>
        group by user_id;
    </select>

    <select id="selectUserStat" resultMap="UserStatResultMap">
        select user_id           as user_id,
               count(article_id) as total_articles,
               sum(views)        as total_views,
               sum(likes)        as total_likes,
               sum(comments)     as total_comments,
               sum(collects)     as total_collects
        from article_stat
        where user_id = #{userId};
    </select>

    <select id="selectHotArticlesByCateId" resultType="top.wang3.hami.common.model.HotCounter">
        select t2.article_id as article_id, t2.hot_rank as hot_rank
        from article t1
                 join article_stat t2 on t1.id = t2.article_id
        where t1.category_id = #{categoryId}
          and t1.deleted = 0
          and t1.ctime > #{date}
        order by t2.hot_rank desc
        limit 24;
    </select>

    <select id="selectHotArticles" resultType="top.wang3.hami.common.model.HotCounter">
        select article_id, hot_rank
        from article_stat
        where ctime >= #{date}
        order by hot_rank desc
        limit 54;
    </select>

    <select id="selectArticleStatsByArticleIds" resultMap="ArticleStatDTOResultMap">
        select article_id, views, likes, comments, collects
        from article_stat
        where article_id in
        <foreach collection="articleIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <update id="batchUpdateLikes" parameterType="java.util.List">
        update article_stat
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="likes = likes + case" suffix="end,">
                <foreach collection="stats" item="item" index="index">
                    <if test="item.likes != null and item.likes != 0">
                        when article_id = #{item.articleId} then #{item.likes}
                    </if>
                </foreach>
            </trim>
        </trim>
        where article_id in
        <foreach collection="stats" item="item" open="(" close=")" separator=",">
            #{item.articleId}
        </foreach>
    </update>

    <update id="batchUpdateComments" parameterType="java.util.List">
        update article_stat
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="comments = comments + case" suffix="end,">
                <foreach collection="stats" item="item" index="index">
                    <if test="item.comments != null and item.comments != 0">
                        when article_id = #{item.articleId} then #{item.comments}
                    </if>
                </foreach>
            </trim>
        </trim>
        where article_id in
        <foreach collection="stats" item="item" open="(" close=")" separator=",">
            #{item.articleId}
        </foreach>
    </update>

    <update id="batchUpdateCollects" parameterType="java.util.List">
        update article_stat
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="collects = collects + case" suffix="end,">
                <foreach collection="stats" item="item" index="index">
                    <if test="item.collects != null and item.collects != 0">
                        when article_id = #{item.articleId} then #{item.collects}
                    </if>
                </foreach>
            </trim>
        </trim>
        where article_id in
        <foreach collection="stats" item="item" open="(" close=")" separator=",">
            #{item.articleId}
        </foreach>
    </update>

    <update id="batchUpdateViews" parameterType="java.util.List">
        update article_stat
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="views = views + case" suffix="end,">
                <foreach collection="stats" item="item" index="index">
                    <if test="item.views != null and item.views != 0">
                        when article_id = #{item.articleId} then #{item.views}
                    </if>
                </foreach>
            </trim>
        </trim>
        where article_id in
        <foreach collection="stats" item="item" open="(" close=")" separator=",">
            #{item.articleId}
        </foreach>
    </update>

    <insert id="batchInsertArticleStat">
        insert into article_stat (article_id, user_id) values
        <foreach collection="items" separator="," item="item">
            (#{item.articleId}, #{item.userId})
        </foreach>
    </insert>
</mapper>